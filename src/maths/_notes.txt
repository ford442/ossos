Implement Bezier Easing
https://greweb.me/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation

//https://stackoverflow.com/questions/67919193/how-does-unity-implements-vector3-slerp-exactly
Vector3 Slerp(Vector3 start, Vector3 end, float percent)
{
     // Dot product - the cosine of the angle between 2 vectors.
     float dot = Vector3.Dot(start, end);

     // Clamp it to be in the range of Acos()
     // This may be unnecessary, but floating point
     // precision can be a fickle mistress.
     Mathf.Clamp(dot, -1.0f, 1.0f);

     // Acos(dot) returns the angle between start and end,
     // And multiplying that by percent returns the angle between
     // start and the final result.
     float theta = Mathf.Acos(dot) * percent;
     Vector3 RelativeVec = end - start * dot;
     RelativeVec.Normalize();

     // Orthonormal basis
     // The final result.
     return ((start*Mathf.Cos(theta)) + (RelativeVec * Mathf.Sin(theta)));
}

//https://github.com/godotengine/godot/blob/master/modules/mono/glue/GodotSharp/GodotSharp/Core/Vector3.cs#L610
public readonly Vector3 Slerp(Vector3 to, real_t weight)
{
    real_t startLengthSquared = LengthSquared();
    real_t endLengthSquared = to.LengthSquared();
    if (startLengthSquared == 0.0 || endLengthSquared == 0.0)
    {
        // Zero length vectors have no angle, so the best we can do is either lerp or throw an error.
        return Lerp(to, weight);
    }
    real_t startLength = Mathf.Sqrt(startLengthSquared);
    real_t resultLength = Mathf.Lerp(startLength, Mathf.Sqrt(endLengthSquared), weight);
    real_t angle = AngleTo(to);
    return Rotated(Cross(to).Normalized(), angle * weight) * (resultLength / startLength);
}